#include<stdio.h>
#include<stdlib.h>

void menu();
void start();
void input (int A[][10],  int N[][10],  int M[10][10], int W[1][10],int *n,int *m);
int  check (int A[][10],  int N[][10],  int AV[1][10], int n,int m,int a[]);
int  queue (int A[][10],  int N[][10],  int W[1][10],  int n,int m);
void rereq (int A[10][10],int N[10][10],int AV[10][10],int pid,int m);
void matrix(int mat[][10],  int n,int m);

int main()
{
	printf("\n\n\tDEADLOCK AVOIDANCE \n");
	printf("    \t         ...for process with multiple instances of a resource :)\n ");
	menu();
	return 0;
}

void menu()
{
	int ch;
	printf("\n\n\tEnter ur choice : ");
	X:
		printf("\n\t\t1.Banker's Algorithm (to check the state of a system)\n\t\t2.bowOut   :");
		scanf("%d",&ch);
		switch(ch)
			{
				case 1:
					start();
					break;
				case 2:
					exit(0);
				default:
					printf("\n\n\t\t\tInvalid choice\n\t\tEnter choice as mentioned\n\n");
					goto X;
			};	
}
	
void start()
{
	int Allocation[10][10];
	int Maximum[10][10];
	int Need[10][10];
	int Work[1][10];
	int n,m,p;
	char choice;
	printf("\n\t\t\tBANKER'S ALGORITHM\n");
	input(Allocation,Need,Maximum,Work,&n,&m);
	if(queue(Allocation,Need,Work,n,m)!=0)
	{
		Y:
		printf("\n\tProgress with requesting additional resources... (y=Yes|n=No)");
		scanf("%s",&choice);
		if(choice == 'y'||choice == 'Y')
		{
			printf("\n\tEnter process no. : ");
			scanf("%d",&p);
			rereq(Allocation,Need,Work,p,m);
			if(queue(Allocation,Need,Work,n,m) == 0 )
			{
				exit(0);
			}
			goto Y;	
		}
		else
			menu();
	}
	else
		exit(0);
}

void input(int A[][10],int N[][10],int M[10][10],int W[1][10],int *n,int *m)
{
	int i,j;
	printf("\n\tNo. of processes : ");
	scanf("%d",n);
	printf("\n\tNo. of resources : ");
	scanf("%d",m);
	printf("\n\n\tInstances of each  resource  Allocated  to processes\n");
	for(i=0;i<*n;i++)
	{
		printf("\n\t\tProcess  %d\n",i);
		for(j=0;j<*m;j++)
		{
			printf("\t\tResource %c : ",j+65);
			scanf("%d",&A[i][j]);
		}
	}
	printf("\n\n\tMaximum instances of resource to processes\n");
	for(i=0;i<*n;i++)
	{
		printf("\n\t\tProcess %d\n",i);
		for(j=0;j<*m;j++)
		{
			printf("\t\tResource %c : ",j+65);
			scanf("%d",&M[i][j]);
		}
	}
	printf("\n\tAvailable instances of each resource : ");
	for(i=0;i<*m;i++)
	{
		printf("\n\t\tResource %c : ",i+65);
		scanf("%d",&W[0][i]);
	}

	for(i=0;i<*n;i++)
	{
		for(j=0;j<*m;j++)
		{
			N[i][j]=M[i][j]-A[i][j];
		}
	}
	printf("\n\n\tAllocation : ");
	matrix(A,*n,*m);
	printf("\n\tMaximum  : ");
	matrix(M,*n,*m);
	printf("\n\tNeed : ");
	matrix(N,*n,*m);
}

int check(int A[][10],int N[][10],int AV[1][10],int n,int m,int a[])
{
	int i,j,k,x=0;
	int Finish[10],W[1][10];
	int pflag=0,flag=0;
	for(i=0;i<n;i++)
		Finish[i]=0;
	for(i=0;i<m;i++)
		W[0][i]=AV[0][i];
	for(k=0;k<n;k++)
	{
		for(i=0;i<n;i++)
		{
			if(Finish[i] == 0)
			{
				flag=0;
				for(j=0;j<m;j++)
				{
					if(N[i][j] > W[0][j])
						flag=1;
				}
				if(flag == 0 && Finish[i] == 0)
				{
					for(j=0;j<m;j++)
						W[0][j] = W[0][j] + A[i][j];
					Finish[i]=1;
					pflag++;
					a[x++]=i;
				}
			}
		}
		if(pflag == n)
			return 1;
	}
	return 0;
}

int queue(int A[][10],int N[][10],int W[1][10],int n,int m)
{
	int j,i,a[10];
	j=check(A,N,W,n,m,a);
	if(j != 0 )
	{
		printf("\n\n\t\t");
		for(i=0;i<n;i++)
		     printf(" P%d  ",a[i]);
		printf("\n\t\tSequence of execution to avoid Dead Lock.\n");
		return 1;
	}
	else
	{
		printf("\n\n\tNot in safe state...Deadlock has occured.\n");
		return 0;
	}
}

void rereq(int A[10][10],int N[10][10],int AV[1][10],int pid,int m)
{
	int reqmat[1][10];
	int i;
	printf("\n\tRequest instances for each resource : \n");
	for(i=0;i<m;i++)
	{
		printf("\t\tResource %c : ",i+65);
		scanf("%d",&reqmat[0][i]);
	}
	
	for(i=0;i<m;i++)
		if(reqmat[0][i] > N[pid][i])
		{
			printf("\n\n\tError...!\n");
			exit(0);
		}

	for(i=0;i<m;i++)
		if(reqmat[0][i] > AV[0][i])
		{
			printf("\n\n\tResources are not available...!\n");
			exit(0);
		}
	
	for(i=0;i<m;i++)
	{
		AV[0][i]-=reqmat[0][i];
		A[pid][i]+=reqmat[0][i];
		N[pid][i]-=reqmat[0][i];
	}
}

void matrix(int mat[][10],int n,int m)
{
	int i,j;
	for(i=0;i<n;i++)
	{
		printf("\n\t\t");
		for(j=0;j<m;j++)
		{
			printf("%d\t",mat[i][j]);
		}
	}	
}
