#include<stdio.h>
#include<stdlib.h>

void menu();
void start();
void accept(int A[][10],int N[][10],int M[10][10],int W[1][10],int *n,int *m);
int banker(int A[][10],int N[][10],int W[1][10],int n,int m);
int safety(int A[][10],int N[][10],int AV[1][10],int n,int m,int a[]);
void res_request(int A[10][10],int N[10][10],int AV[10][10],int pid,int m);
void print(int x[][10],int n,int m);

int main()
{
	menu();
	return 0;
}

void menu()
{
	int ch;
	printf("\nEnter ur choice : ");
	X:
		printf("\n1.Banker's Algorithm (to check the state of a system)\n2.bowOut\n");
	scanf("%d",&ch);
	switch(ch)
		{
			case 1:
				start();
				break;
			case 2:
				exit(0);
			default:
				printf("\n\n\t\tInvalid choice\n\t\tEnter choice as mentioned\n\n");
				goto X;
		};
		
}
	
void start()
{
	int Allocation[10][10];
	int Maximum[10][10];
	int Need[10][10];
	int Work[1][10];
	int n,m,pn;
	char choice;
	printf("\nDEADLOCK AVOIDANCE USING BANKER'S ALGORITHM\n");
	accept(Allocation,Need,Maximum,Work,&n,&m);
	if(banker(Allocation,Need,Work,n,m)!=0)
	{
		Y:
		printf("\nDo you want make an additional request ? (y=Yes|n=No)");
		scanf("%s",&choice);
		if(choice == 'y'||choice == 'Y')
		{
			printf("\nEnter process no. : ");
			scanf("%d",&pn);
			res_request(Allocation,Need,Work,pn-1,m);
			if(banker(Allocation,Need,Work,n,m) == 0 )
			{
				exit(0);
			}
			goto Y;	
		}
		else
			menu();
	}
	else
		exit(0);
}

void accept(int A[][10],int N[][10],int M[10][10],int W[1][10],int *n,int *m)
{
	int i,j;
	printf("\nEnter total no. of processes : ");
	scanf("%d",n);
	printf("\nEnter total no. of resources : ");
	scanf("%d",m);
	
	
	printf("\n\n\tAllocation of resources to processes\n");
	for(i=0;i<*n;i++)
	{
		printf("\nProcess : %d",i+1);
		for(j=0;j<*m;j++)
		{
			printf("\nResource %d : ",j+1);
			scanf("%d",&A[i][j]);
		}
	}
	printf("\n\n\tMaximum instances of resource to processes\n");
	for(i=0;i<*n;i++)
	{
		printf("\nProcess %d",i+1);
		for(j=0;j<*m;j++)
		{
			printf("\nResource %d : ",j+1);
			scanf("%d",&M[i][j]);
		}
	}
	printf("\nAvailable resources : ");
	for(i=0;i<*m;i++)
	{
		printf("\nResource %d : ",i+1);
		scanf("%d",&W[0][i]);
	}

	for(i=0;i<*n;i++)
		for(j=0;j<*m;j++)
			N[i][j]=M[i][j]-A[i][j];

	printf("\nAllocation Matrix");
	print(A,*n,*m);
	printf("\nMaximum Requirement Matrix");
	print(M,*n,*m);
	printf("\nNeed Matrix");
	print(N,*n,*m);
}

int banker(int A[][10],int N[][10],int W[1][10],int n,int m)
{
	int j,i,a[10];
	j=safety(A,N,W,n,m,a);
	if(j != 0 ){
		printf("\n\n");
		for(i=0;i<n;i++)
		     printf(" P%d  ",a[i]);
		printf("\nA safety sequence has been detected.\n");
		return 1;
	}else{
		printf("\nDeadlock has occured.\n");
		return 0;
	}
}

int safety(int A[][10],int N[][10],int AV[1][10],int n,int m,int a[])
{

	int i,j,k,x=0;
	int Finish[10],W[1][10];
	int pflag=0,flag=0;
	for(i=0;i<n;i++)
		Finish[i]=0;
	for(i=0;i<m;i++)
		W[0][i]=AV[0][i];
	for(k=0;k<n;k++){
		for(i=0;i<n;i++){
			if(Finish[i] == 0){
				flag=0;
				for(j=0;j<m;j++){
					if(N[i][j] > W[0][j])
						flag=1;
				}
				if(flag == 0 && Finish[i] == 0){
					for(j=0;j<m;j++)
						W[0][j]+=A[i][j];
					Finish[i]=1;
					pflag++;
					a[x++]=i;
				}
			}
		}
		if(pflag == n)
			return 1;
	}
	return 0;
}

void res_request(int A[10][10],int N[10][10],int AV[10][10],int pid,int m)
{
	int reqmat[1][10];
	int i;
	printf("\nEnter additional request : \n");
	for(i=0;i<m;i++){
		printf("Request for resource %d : ",i+1);
		scanf("%d",&reqmat[0][i]);
	}
	
	for(i=0;i<m;i++)
		if(reqmat[0][i] > N[pid][i]){
			printf("\nError encountered.\n");
			exit(0);
	}

	for(i=0;i<m;i++)
		if(reqmat[0][i] > AV[0][i]){
			printf("\nResources unavailable.\n");
			exit(0);
		}
	
	for(i=0;i<m;i++){
		AV[0][i]-=reqmat[0][i];
		A[pid][i]+=reqmat[0][i];
		N[pid][i]-=reqmat[0][i];
	}
}

void print(int x[][10],int n,int m)
{
	int i,j;
	for(i=0;i<n;i++){
		printf("\n");
		for(j=0;j<m;j++){
			printf("%d\t",x[i][j]);
		}
	}	
}
